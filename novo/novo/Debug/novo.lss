
novo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000c0  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000114  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000114  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000144  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  00000180  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000799  00000000  00000000  000001d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000698  00000000  00000000  00000969  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000037f  00000000  00000000  00001001  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000068  00000000  00000000  00001380  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000037e  00000000  00000000  000013e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000066  00000000  00000000  00001766  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000017cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
int main(void)
{
	uint8_t count;
	char buffer[5];
	
	DDRA = 0x01;
  6c:	81 e0       	ldi	r24, 0x01	; 1
  6e:	8a bb       	out	0x1a, r24	; 26
	
	//LCD_Init();
	SPI_Init();
  70:	0e 94 49 00 	call	0x92	; 0x92 <SPI_Init>
	
	//LCD_String_xy(1, 0, "Slave Device");
	//LCD_String_xy(2, 0, "Receive Data:    ");
	while (1)			/* Receive count continuous */
	{
		count = SPI_Read();
  74:	0e 94 58 00 	call	0xb0	; 0xb0 <SPI_Read>
		PORTA = 0x01;
  78:	81 e0       	ldi	r24, 0x01	; 1
  7a:	8b bb       	out	0x1b, r24	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  7c:	2f ef       	ldi	r18, 0xFF	; 255
  7e:	8f e3       	ldi	r24, 0x3F	; 63
  80:	9b e0       	ldi	r25, 0x0B	; 11
  82:	21 50       	subi	r18, 0x01	; 1
  84:	80 40       	sbci	r24, 0x00	; 0
  86:	90 40       	sbci	r25, 0x00	; 0
  88:	e1 f7       	brne	.-8      	; 0x82 <main+0x16>
  8a:	00 c0       	rjmp	.+0      	; 0x8c <main+0x20>
  8c:	00 00       	nop
		_delay_ms(500);
		PORTA = 0;
  8e:	1b ba       	out	0x1b, r1	; 27
  90:	f1 cf       	rjmp	.-30     	; 0x74 <main+0x8>

00000092 <SPI_Init>:
void SPI_Write(char data)					/* SPI write data function */
{
	char flush_buffer;
	SPDR = data;							/* Write data to SPI data register */
	while(!(SPSR & (1<<SPIF)));				/* Wait till transmission complete */
	flush_buffer = SPDR;					/* Flush received data */
  92:	87 b3       	in	r24, 0x17	; 23
  94:	80 6b       	ori	r24, 0xB0	; 176
  96:	87 bb       	out	0x17, r24	; 23
  98:	87 b3       	in	r24, 0x17	; 23
  9a:	8f 7b       	andi	r24, 0xBF	; 191
  9c:	87 bb       	out	0x17, r24	; 23
  9e:	88 b3       	in	r24, 0x18	; 24
  a0:	80 61       	ori	r24, 0x10	; 16
  a2:	88 bb       	out	0x18, r24	; 24
  a4:	81 e5       	ldi	r24, 0x51	; 81
  a6:	8d b9       	out	0x0d, r24	; 13
  a8:	8e b1       	in	r24, 0x0e	; 14
  aa:	8e 7f       	andi	r24, 0xFE	; 254
  ac:	8e b9       	out	0x0e, r24	; 14
  ae:	08 95       	ret

000000b0 <SPI_Read>:
/* Note: SPIF flag is cleared by first reading SPSR (with SPIF set) and then accessing SPDR hence flush buffer used here to access SPDR after SPSR read */
}

char SPI_Read()								/* SPI read data function */
{
	SPDR = 0xFF;
  b0:	8f ef       	ldi	r24, 0xFF	; 255
  b2:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));				/* Wait till reception complete */
  b4:	77 9b       	sbis	0x0e, 7	; 14
  b6:	fe cf       	rjmp	.-4      	; 0xb4 <SPI_Read+0x4>
	return(SPDR);							/* return received data */
  b8:	8f b1       	in	r24, 0x0f	; 15
}
  ba:	08 95       	ret

000000bc <_exit>:
  bc:	f8 94       	cli

000000be <__stop_program>:
  be:	ff cf       	rjmp	.-2      	; 0xbe <__stop_program>
